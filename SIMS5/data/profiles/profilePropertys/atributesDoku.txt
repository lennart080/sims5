entityStartEnergie  :int  // should never be zero
entityStartSchrott  :int
entityStartAttack  :int  // should always be lower than StartHealth
entityStartEnergieCapacity  :int  // should never be under StartEnergie value
entityStartSpeed  :int  // should never be zero if StartSchrott is zero
entityStartDefense  :int  // should never be higher than StartAttack
entityStartHealth  :int  // should never be zero
entityStartRust  :int  //should always be zero
entityStartSolar  :int  // should never be zero if StartSchrott is zero
entityWalkActivation  :double  // (0.01 - 0.99)
entityEnergylossAjustmentPerDay  :double  // how mutch more energieLoss is applied per day
entityRustPlus  :double  //only if standing still
entityRustLoss  :double  //only when walking
entityEnergyLoss  :double  // always
entityHealthLoss  :double  // only if energy is 0 
noiseStrength  :double  // wie starke schwankungen das Noise haben soll (0 - 0.1)
lightTime  :double  // wie lange die sonne pro tag scheint (0 - 60)
lightIntensity  :double  // wie stark das licht scheint (0 - 10)
noiseSize  :double  //je kleiner deszo schneller werden die schwingungen des Noise (0.0 - 0.5)
dayLengthVariation  :double  //tages l√§ngen unterschied (0 - 500) 
seed  :int  // must be positive
simulationSize  :int  // must be positive
entitysPerRound  :int  // should never be zero 
entitySize  :int  // should never be under 2 | sloud be the same as graphics size
oneDayInSeconds  :int  // simulation speed (1 - 3600) 
networkStartHiddenLayers  :int[]  // n[row] = number in that row
doSpawnedNeuronshaveABias  :boolean
mutationProbabilityWeightDying  :double[]  // v[0] = start probability | v[1] = end probability | v[2] = end probability round
mutationProbabilityNewWeight  :double[]  // v[0] should never be above 1 | v[1] should always be lower than v[0] 
mutationProbabilityWeightAjustment  :double[]  //...
mutationProbabilityWeightAjustmentValue  :double[]  //...
mutationProbabilityBiasAjustment  :double[]  //...
mutationProbabilityBiasAjustmentValue  :double[]  //...
mutationProbabilityNewNeuronRow  :double[]  //...
mutationProbabilityNewNeuron  :double[]  //...
mutationProbabilityNeuronDying  :double[]  //...
entitySelectionValueRandom  :int  //always atleast be one less or lower than entitysPerRound 
entitySelectionValueMostDifferent  :int  //...
entitySelectionValueNew  :int  //...
simulationmode  :int  // what kind of simulation should be run